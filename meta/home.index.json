{
  "ownKey": "home",
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/krow",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://copper-leaf.github.io/krow"
      },
      "description": "",
      "title": "Home",
      "content": "<h1 id=\"krow\"><a href=\"#krow\" id=\"krow\" class=\"anchor\"><\/a>Krow<\/h1>\n<blockquote>\n<p>A small DSL for generating tables in ASCII or HTML formats<\/p>\n<\/blockquote>\n<p><img src=\"https://img.shields.io/github/v/release/copper-leaf/krow\" alt=\"GitHub release (latest by date)\" />\n<img src=\"https://img.shields.io/maven-central/v/io.github.copper-leaf/krow-core\" alt=\"Maven Central\" />\n<img src=\"https://img.shields.io/badge/Kotlin-1.4.32-orange\" alt=\"Kotlin Version\" /><\/p>\n<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<pre><code class=\"language-kotlin\">val table = krow {\n    cell(&quot;col1&quot;, &quot;row1&quot;) { content = &quot;1-1&quot; }\n    cell(&quot;col1&quot;, &quot;row2&quot;) { content = &quot;1-2&quot; }\n\n    cell(&quot;col2&quot;, &quot;row1&quot;) { content = &quot;2-1&quot; }\n    cell(&quot;col2&quot;, &quot;row2&quot;) { content = &quot;2-2&quot; }\n\n    cell(&quot;col3&quot;, &quot;row1&quot;) { content = &quot;3-1&quot; }\n    cell(&quot;col3&quot;, &quot;row2&quot;) { content = &quot;3-2&quot; }\n\n    table {\n        wrapTextAt = 30\n        horizontalAlignment = HorizontalAlignment.CENTER\n        verticalAlignment = VerticalAlignment.TOP\n    }\n}\n<\/code><\/pre>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<pre><code class=\"language-kotlin\">repositories {\n    mavenCentral()\n}\n\n// for plain JVM or Android projects\ndependencies {\n    implementation(&quot;io.github.copper-leaf:krow-core:1.0.0&quot;)\n}\n\n// for multiplatform projects\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(&quot;io.github.copper-leaf:krow-core:1.0.0&quot;)\n            }\n        }\n    }\n}\n<\/code><\/pre>\n<h2 id=\"targets\"><a href=\"#targets\" id=\"targets\" class=\"anchor\"><\/a>Targets<\/h2>\n<p>Krow renders both ASCII and HTML as plain Strings, with no platform-specific formatting. Krow publishes artifacts for\nthe following Kotlin targets.<\/p>\n<table>\n<thead>\n<tr><th>Platform<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Android<\/td><\/tr>\n<tr><td>JVM<\/td><\/tr>\n<tr><td>iOS<\/td><\/tr>\n<tr><td>JS<\/td><\/tr>\n<\/tbody>\n<\/table>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<p>Krow is a DSL for the layout and rendering of HTML-like tables. It supports table cells that can span both rows and\ncolumns, as well as several border styles to tweak the presentation of ASCII tables.<\/p>\n<h2 id=\"dsl\"><a href=\"#dsl\" id=\"dsl\" class=\"anchor\"><\/a>DSL<\/h2>\n<h3 id=\"header-columns\"><a href=\"#header-columns\" id=\"header-columns\" class=\"anchor\"><\/a>Header Columns<\/h3>\n<p>To build a table with 3 columns, such as:<\/p>\n<pre><code>val expected = &quot;&quot;&quot;\n    ┌──────┬──────────┬──────────┬──────────┐\n    │      │ column 1 │ column 2 │ column 3 │\n    ├──────┼──────────┼──────────┴──────────┤\n    │ row1 │ 1        │ 2                   │\n    └──────┴──────────┴─────────────────────┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<p>all of the following styles are equivalent:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"dsl_header\">\n  \n    <li class=\"is-active\"><a>table-header-columns1<\/a><\/li>\n  \n    <li ><a>table-header-columns2<\/a><\/li>\n  \n    <li ><a>table-header-columns3<\/a><\/li>\n  \n    <li ><a>table-header-columns4<\/a><\/li>\n  \n    <li ><a>table-header-columns5<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"dsl_header\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    header {\n        row {\n            column(\"column 1\")\n            column(\"column 2\")\n            column(\"column 3\")\n        }\n    }\n    body {\n        row(\"row1\") {\n            cell(\"1\")\n            cell(\"2\") { colSpan = 2 }\n        }\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    header {\n        column(\"column 1\")\n        column(\"column 2\")\n        column(\"column 3\")\n    }\n    body {\n        row(\"row1\") {\n            cell(\"1\")\n            cell(\"2\") { colSpan = 2 }\n        }\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    header {\n        row {\n            columns(\"column 1\", \"column 2\", \"column 3\")\n        }\n    }\n    body {\n        row(\"row1\") {\n            cell(\"1\")\n            cell(\"2\") { colSpan = 2 }\n        }\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    header {\n        columns(\"column 1\", \"column 2\", \"column 3\")\n    }\n    body {\n        row(\"row1\") {\n            cell(\"1\")\n            cell(\"2\") { colSpan = 2 }\n        }\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    headerColumns(\"column 1\", \"column 2\", \"column 3\")\n    body {\n        row(\"row1\") {\n            cell(\"1\")\n            cell(\"2\") { colSpan = 2 }\n        }\n    }\n}<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"body-rows\"><a href=\"#body-rows\" id=\"body-rows\" class=\"anchor\"><\/a>Body Rows<\/h3>\n<p>To build a table with 2 columns, such as:<\/p>\n<pre><code>val expected = &quot;&quot;&quot;\n    ┌──────┬──────────┬──────────┬──────────┐\n    │      │ column 1 │ column 2 │ column 3 │\n    ├──────┼──────────┼──────────┼──────────┤\n    │ row1 │ 1        │ 2        │ 3        │\n    ├──────┼──────────┼──────────┼──────────┤\n    │ row2 │ a        │ b        │ c        │\n    └──────┴──────────┴──────────┴──────────┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<p>all of the following styles are equivalent:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"body_dsl\">\n  \n    <li class=\"is-active\"><a>table-body-rows1<\/a><\/li>\n  \n    <li ><a>table-body-rows2<\/a><\/li>\n  \n    <li ><a>table-body-rows3<\/a><\/li>\n  \n    <li ><a>table-body-rows4<\/a><\/li>\n  \n    <li ><a>table-body-rows5<\/a><\/li>\n  \n    <li ><a>table-body-rows6<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"body_dsl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    headerColumns(\"column 1\", \"column 2\", \"column 3\")\n    body {\n        row(\"row1\") {\n            cell(\"1\")\n            cell(\"2\")\n            cell(\"3\")\n        }\n        row(\"row2\") {\n            cell(\"a\")\n            cell(\"b\")\n            cell(\"c\")\n        }\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    headerColumns(\"column 1\", \"column 2\", \"column 3\")\n    body {\n        row(\"row1\") {\n            cells(\"1\", \"2\", \"3\")\n        }\n        row(\"row2\") {\n            cells(\"a\", \"b\", \"c\")\n        }\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    headerColumns(\"column 1\", \"column 2\", \"column 3\")\n    body {\n        rows(\n            \"row1\" to listOf(\"1\", \"2\", \"3\"),\n            \"row2\" to listOf(\"a\", \"b\", \"c\")\n        )\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    headerColumns(\"column 1\", \"column 2\", \"column 3\")\n    bodyRow(\"row1\") {\n        cell(\"1\")\n        cell(\"2\")\n        cell(\"3\")\n    }\n    bodyRow(\"row2\") {\n        cell(\"a\")\n        cell(\"b\")\n        cell(\"c\")\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    headerColumns(\"column 1\", \"column 2\", \"column 3\")\n    bodyRow(\"row1\") {\n        cells(\"1\", \"2\", \"3\")\n    }\n    bodyRow(\"row2\") {\n        cells(\"a\", \"b\", \"c\")\n    }\n}<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">krow {\n    headerColumns(\"column 1\", \"column 2\", \"column 3\")\n    bodyRows(\n        \"row1\" to listOf(\"1\", \"2\", \"3\"),\n        \"row2\" to listOf(\"a\", \"b\", \"c\")\n    )\n}<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"dynamic-layout\"><a href=\"#dynamic-layout\" id=\"dynamic-layout\" class=\"anchor\"><\/a>Dynamic Layout<\/h3>\n<p>The above snippets all assume a statically-defined layout of columns and rows, but the core layout engine of Krow allows\nyou to build tables much more dynamically as well. Rather than manually defining columns and the names of rows, you can\ninstead just define the content of the table, and it will expand and adapt to the content.<\/p>\n<p>The following are some examples of dynamically-laid out tables, and how they get rendered.<\/p>\n<h4 id=\"rows\"><a href=\"#rows\" id=\"rows\" class=\"anchor\"><\/a>Rows<\/h4>\n<p>By omitting a row name for each body row, the table will generate the row name as the row index.<\/p>\n<pre><code class=\"language-kotlin\">val table = krow {\n    headerColumns(&quot;column 1&quot;, &quot;column 2&quot;, &quot;column 3&quot;)\n    bodyRow {\n        cells(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)\n    }\n    bodyRow {\n        cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n    }\n}\n<\/code><\/pre>\n<pre><code>val expected = &quot;&quot;&quot;\n        ┌───┬──────────┬──────────┬──────────┐\n        │   │ column 1 │ column 2 │ column 3 │\n        ├───┼──────────┼──────────┼──────────┤\n        │ 1 │ 1        │ 2        │ 3        │\n        ├───┼──────────┼──────────┼──────────┤\n        │ 2 │ a        │ b        │ c        │\n        └───┴──────────┴──────────┴──────────┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<h4 id=\"columns\"><a href=\"#columns\" id=\"columns\" class=\"anchor\"><\/a>Columns<\/h4>\n<p>Body cells align themselves to columns based on the space available in the row. If a cell is placed at an index that was\nnot specified as a column, that column will be added at the end of the table, with the index of the column used as its\ncolumn name.<\/p>\n<pre><code class=\"language-kotlin\">val table = krow {\n    headerColumns(&quot;column 1&quot;, &quot;column 2&quot;, &quot;column 3&quot;)\n    bodyRow {\n        cells(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;)\n    }\n    bodyRow {\n        cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;)\n    }\n}\n<\/code><\/pre>\n<pre><code>val expected = &quot;&quot;&quot;\n    ┌───┬──────────┬──────────┬──────────┬───┬───┐\n    │   │ column 1 │ column 2 │ column 3 │ 4 │ 5 │\n    ├───┼──────────┼──────────┼──────────┼───┼───┤\n    │ 1 │ 1        │ 2        │ 3        │ 4 │ 5 │\n    ├───┼──────────┼──────────┼──────────┼───┼───┤\n    │ 2 │ a        │ b        │ c        │ d │ e │\n    └───┴──────────┴──────────┴──────────┴───┴───┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<p>This can be expanded out such that manually specifying columns is entirely optional.<\/p>\n<pre><code class=\"language-kotlin\">val table = krow {\n    bodyRow {\n        cells(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)\n    }\n    bodyRow {\n        cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n    }\n}\n<\/code><\/pre>\n<pre><code>val expected = &quot;&quot;&quot;\n        ┌───┬───┬───┬───┐\n        │   │ 1 │ 2 │ 3 │\n        ├───┼───┼───┼───┤\n        │ 1 │ 1 │ 2 │ 3 │\n        ├───┼───┼───┼───┤\n        │ 2 │ a │ b │ c │\n        └───┴───┴───┴───┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<h4 id=\"cells\"><a href=\"#cells\" id=\"cells\" class=\"anchor\"><\/a>Cells<\/h4>\n<p>If a previous cell in the row has a row span, a cell will be placed in the next available column within that row, adding\ncolumns as necessary.<\/p>\n<pre><code class=\"language-kotlin\">val table = krow {\n    headerColumns(&quot;column 1&quot;, &quot;column 2&quot;, &quot;column 3&quot;)\n    bodyRow {\n        cell(&quot;1&quot;) { colSpan = 2 }\n        cell(&quot;2&quot;)\n        cell(&quot;3&quot;) { colSpan = 2 }\n    }\n    bodyRow {\n        cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;)\n    }\n}\n<\/code><\/pre>\n<pre><code>val expected = &quot;&quot;&quot;\n    ┌───┬──────────┬──────────┬──────────┬───┬───┐\n    │   │ column 1 │ column 2 │ column 3 │ 4 │ 5 │\n    ├───┼──────────┴──────────┼──────────┼───┴───┤\n    │ 1 │ 1                   │ 2        │ 3     │\n    ├───┼──────────┬──────────┼──────────┼───┬───┤\n    │ 2 │ a        │ b        │ c        │ d │ e │\n    └───┴──────────┴──────────┴──────────┴───┴───┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<h4 id=\"building-with-coordinates\"><a href=\"#building-with-coordinates\" id=\"building-with-coordinates\" class=\"anchor\"><\/a>Building with Coordinates<\/h4>\n<p>Krow also includes a <code>cellAt<\/code> function which places and configures a cell at the specified row/column coordinates,\nrather than building it in-order with the normal row/column builders. As normal, the rows/columns will expand\nas-necessary to fully accept each cell as it is specified, with row and column spans.<\/p>\n<pre><code class=\"language-kotlin\">val table = krow {\n    headerColumns(&quot;column 1&quot;, &quot;column 2&quot;, &quot;column 3&quot;)\n    cellAt(&quot;row1&quot;, &quot;column 1&quot;) {\n        colSpan = 2\n        content = &quot;1&quot;\n    }\n    cellAt(&quot;row1&quot;, &quot;column 3&quot;) {\n        content = &quot;2&quot;\n    }\n    cellAt(&quot;row1&quot;, &quot;column 4&quot;) {\n        colSpan = 2\n        content = &quot;3&quot;\n    }\n\n    cellAt(&quot;row2&quot;, &quot;column 1&quot;) {\n        content = &quot;a&quot;\n    }\n    cellAt(&quot;row2&quot;, &quot;column 2&quot;) {\n        content = &quot;b&quot;\n    }\n    cellAt(&quot;row2&quot;, &quot;column 3&quot;) {\n        content = &quot;c&quot;\n    }\n    cellAt(&quot;row2&quot;, &quot;column 4&quot;) {\n        content = &quot;d&quot;\n    }\n    cellAt(&quot;row2&quot;, &quot;5&quot;) {\n        content = &quot;e&quot;\n    }\n}\n<\/code><\/pre>\n<pre><code>val expected = &quot;&quot;&quot;\n    ┌──────┬──────────┬──────────┬──────────┬──────────┬───┐\n    │      │ column 1 │ column 2 │ column 3 │ column 4 │ 5 │\n    ├──────┼──────────┴──────────┼──────────┼──────────┴───┤\n    │ row1 │ 1                   │ 2        │ 3            │\n    ├──────┼──────────┬──────────┼──────────┼──────────┬───┤\n    │ row2 │ a        │ b        │ c        │ d        │ e │\n    └──────┴──────────┴──────────┴──────────┴──────────┴───┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<p>If a cell already exists at these coordinates, it will allow you to customize the attributes of that cell, rather than\nattempting to create a new one. This makes it also useful for building the table structure with the row/column builders,\nthen tweaking some of the content or styling of individual cells afterward.<\/p>\n<pre><code class=\"language-kotlin\">val table = krow {\n    headerColumns(&quot;column 1&quot;, &quot;column 2&quot;, &quot;column 3&quot;)\n    bodyRow {\n        cells(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)\n    }\n    bodyRow {\n        cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n    }\n\n    cellAt(&quot;2&quot;, &quot;column 2&quot;) { content = &quot;overridden with cellAt&quot; }\n}\n<\/code><\/pre>\n<pre><code>val expected = &quot;&quot;&quot;\n    ┌───┬──────────┬────────────────────────┬──────────┐\n    │   │ column 1 │ column 2               │ column 3 │\n    ├───┼──────────┼────────────────────────┼──────────┤\n    │ 1 │ 1        │ 2                      │ 3        │\n    ├───┼──────────┼────────────────────────┼──────────┤\n    │ 2 │ a        │ overridden with cellAt │ c        │\n    └───┴──────────┴────────────────────────┴──────────┘\n&quot;&quot;&quot;.trimIndent()\n<\/code><\/pre>\n<p>Be careful when using this layout DSL that the cell configurations do not overlap, which will throw an exception. It is\nalso an error to attempt to change the rowSpan or colSpan after the cell has been created.<\/p>\n<h2 id=\"rendering\"><a href=\"#rendering\" id=\"rendering\" class=\"anchor\"><\/a>Rendering<\/h2>\n<p>Krow tables can be rendered either as ASCII tables, using a custom layout/rendering algorithm, or as HTML text to be\ndisplayed in a browser. So far, all examples have been shown using the ASCII renderer.<\/p>\n<h3 id=\"ascii\"><a href=\"#ascii\" id=\"ascii\" class=\"anchor\"><\/a>ASCII<\/h3>\n<p>Tables are rendered to ASCII with the <code>AsciiTableFormatter<\/code>. You can customize row widths and choose whether to display\nthe header row or leading column.<\/p>\n<pre><code class=\"language-kotlin\">val borders = DoubleBorder()\nval table = krow {\n    // ...\n}\nAsciiTableFormatter(borders).print(table)\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">krow {\n    header {\n        row {\n            column(&quot;column 1&quot;)\n            column(&quot;column 2&quot;) { width = 16 }\n            column(&quot;column 3&quot;)\n        }\n    }\n    bodyRow(&quot;row1&quot;) { cells(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;) }\n    bodyRow(&quot;row2&quot;) { cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) }\n\n    cellAt(&quot;row1&quot;, &quot;column 2&quot;) {\n        content = &quot;This is some long string which should wrap at the &quot; +\n            &quot;appropriate width, which will also chop down reallyreallyreallyreallyreallylong &quot; +\n            &quot;words if needed&quot;\n    }\n}\n<\/code><\/pre>\n<pre><code>┌──────┬──────────┬────────────────┬──────────┐\n│      │ column 1 │ column 2       │ column 3 │\n├──────┼──────────┼────────────────┼──────────┤\n│ row1 │ 1        │ This is some   │ 3        │\n│      │          │ long string    │          │\n│      │          │ which should   │          │\n│      │          │ wrap at the    │          │\n│      │          │ appropriate    │          │\n│      │          │ width, which   │          │\n│      │          │ will also chop │          │\n│      │          │ down reallyre- │          │\n│      │          │ allyreallyrea- │          │\n│      │          │ llyreallylong  │          │\n│      │          │ words if       │          │\n│      │          │ needed         │          │\n├──────┼──────────┼────────────────┼──────────┤\n│ row2 │ a        │ b              │ c        │\n└──────┴──────────┴────────────────┴──────────┘\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">krow {\n    includeHeaderRow = false\n    header {\n        row {\n            column(&quot;column 1&quot;)\n            column(&quot;column 2&quot;) { width = 16 }\n            column(&quot;column 3&quot;)\n        }\n    }\n    bodyRow(&quot;row1&quot;) { cells(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;) }\n    bodyRow(&quot;row2&quot;) { cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) }\n\n    cellAt(&quot;row1&quot;, &quot;column 2&quot;) {\n        content = &quot;This is some long string which should wrap at the &quot; +\n            &quot;appropriate width, which will also chop down reallyreallyreallyreallyreallylong &quot; +\n            &quot;words if needed&quot;\n    }\n}\n<\/code><\/pre>\n<pre><code>┌──────┬───┬────────────────┬───┐\n│ row1 │ 1 │ This is some   │ 3 │\n│      │   │ long string    │   │\n│      │   │ which should   │   │\n│      │   │ wrap at the    │   │\n│      │   │ appropriate    │   │\n│      │   │ width, which   │   │\n│      │   │ will also chop │   │\n│      │   │ down reallyre- │   │\n│      │   │ allyreallyrea- │   │\n│      │   │ llyreallylong  │   │\n│      │   │ words if       │   │\n│      │   │ needed         │   │\n├──────┼───┼────────────────┼───┤\n│ row2 │ a │ b              │ c │\n└──────┴───┴────────────────┴───┘\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">krow {\n    includeLeadingColumn = false\n    header {\n        row {\n            column(&quot;column 1&quot;)\n            column(&quot;column 2&quot;) { width = 16 }\n            column(&quot;column 3&quot;)\n        }\n    }\n    bodyRow(&quot;row1&quot;) { cells(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;) }\n    bodyRow(&quot;row2&quot;) { cells(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) }\n\n    cellAt(&quot;row1&quot;, &quot;column 2&quot;) {\n        content = &quot;This is some long string which should wrap at the &quot; +\n            &quot;appropriate width, which will also chop down reallyreallyreallyreallyreallylong &quot; +\n            &quot;words if needed&quot;\n    }\n}\n<\/code><\/pre>\n<pre><code>┌──────────┬────────────────┬──────────┐\n│ column 1 │ column 2       │ column 3 │\n├──────────┼────────────────┼──────────┤\n│ 1        │ This is some   │ 3        │\n│          │ long string    │          │\n│          │ which should   │          │\n│          │ wrap at the    │          │\n│          │ appropriate    │          │\n│          │ width, which   │          │\n│          │ will also chop │          │\n│          │ down reallyre- │          │\n│          │ allyreallyrea- │          │\n│          │ llyreallylong  │          │\n│          │ words if       │          │\n│          │ needed         │          │\n├──────────┼────────────────┼──────────┤\n│ a        │ b              │ c        │\n└──────────┴────────────────┴──────────┘\n<\/code><\/pre>\n<p>ASCII tables can be customized with several border styles. Currently, you can only apply a single border style to the\nentire table, but in the future I plan on adding support for styling the header row or leading column differently, or\neven applying custom border styles to individual cells.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"ascii_rendered\">\n  \n    <li class=\"is-active\"><a>table-ascii-crossing<\/a><\/li>\n  \n    <li ><a>table-ascii-double<\/a><\/li>\n  \n    <li ><a>table-ascii-rounded-dashed<\/a><\/li>\n  \n    <li ><a>table-ascii-single<\/a><\/li>\n  \n    <li ><a>table-ascii-single-thick<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"ascii_rendered\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>+------+----------+----------+----------+\n|      | column 1 | column 2 | column 3 |\n+------+----------+----------+----------+\n| row1 | 1        | 2                   |\n+------+----------+                     |\n| row2 | a        |                     |\n+------+----------+---------------------+<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>╔══════╦══════════╦══════════╦══════════╗\n║      ║ column 1 ║ column 2 ║ column 3 ║\n╠══════╬══════════╬══════════╩══════════╣\n║ row1 ║ 1        ║ 2                   ║\n╠══════╬══════════╣                     ║\n║ row2 ║ a        ║                     ║\n╚══════╩══════════╩═════════════════════╝<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>╭╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╮\n╎      ╎ column 1 ╎ column 2 ╎ column 3 ╎\n├╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌╌╌╌┤\n╎ row1 ╎ 1        ╎ 2                   ╎\n├╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┤                     ╎\n╎ row2 ╎ a        ╎                     ╎\n╰╌╌╌╌╌╌┴╌╌╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╯<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>┌──────┬──────────┬──────────┬──────────┐\n│      │ column 1 │ column 2 │ column 3 │\n├──────┼──────────┼──────────┴──────────┤\n│ row1 │ 1        │ 2                   │\n├──────┼──────────┤                     │\n│ row2 │ a        │                     │\n└──────┴──────────┴─────────────────────┘<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>┏━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┓\n┃      ┃ column 1 ┃ column 2 ┃ column 3 ┃\n┣━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━┻━━━━━━━━━━┫\n┃ row1 ┃ 1        ┃ 2                   ┃\n┣━━━━━━╋━━━━━━━━━━┫                     ┃\n┃ row2 ┃ a        ┃                     ┃\n┗━━━━━━┻━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━┛<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"html\"><a href=\"#html\" id=\"html\" class=\"anchor\"><\/a>HTML<\/h3>\n<p>Tables are rendered to ASCII with the <code>HtmlTableFormatter<\/code>.<\/p>\n<pre><code class=\"language-kotlin\">val table = krow {\n    // ...\n}\nHtmlTableFormatter().print(table)\n<\/code><\/pre>\n<p>Example output:<\/p>\n<pre><code class=\"language-html\">&lt;table&gt;\n  &lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th&gt;&lt;/th&gt;\n    &lt;th&gt;column 1&lt;/th&gt;\n    &lt;th&gt;column 2&lt;/th&gt;\n    &lt;th&gt;column 3&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td&gt;row1&lt;/td&gt;\n    &lt;td&gt;1&lt;/td&gt;\n    &lt;td rowspan=&quot;2&quot; colspan=&quot;2&quot;&gt;2&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;row2&lt;/td&gt;\n    &lt;td&gt;a&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n\n<\/code><\/pre>\n<table>\n  <thead>\n  <tr>\n    <th><\/th>\n    <th>column 1<\/th>\n    <th>column 2<\/th>\n    <th>column 3<\/th>\n  <\/tr>\n  <\/thead>\n  <tbody>\n  <tr>\n    <td>row1<\/td>\n    <td>1<\/td>\n    <td rowspan=\"2\" colspan=\"2\">2<\/td>\n  <\/tr>\n  <tr>\n    <td>row2<\/td>\n    <td>a<\/td>\n  <\/tr>\n  <\/tbody>\n<\/table>\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/krow",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://copper-leaf.github.io/krow/404.html"
      },
      "description": "",
      "title": "Not Found",
      "content": ""
    }
  ]
}